This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-09T10:41:26.621Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.scss
src/App.test.tsx
src/App.tsx
src/assets/scss/_base.scss
src/components/Debt/DebtCard.tsx
src/components/Debt/DebtsContainer.tsx
src/components/Debt/DebtType.ts
src/components/Person/PersonCard.scss
src/components/Person/PersonCard.tsx
src/components/Person/PersonsContainer.scss
src/components/Person/PersonsContainer.tsx
src/components/Person/PersonType.ts
src/components/Shared/DungeonSeparator.scss
src/components/Shared/DungeonSeparator.tsx
src/components/Shared/SpinningCoin.scss
src/components/Shared/SpinningCoin.tsx
src/debtsSettler.ts
src/index.css
src/index.tsx
src/logo.svg
src/react-app-env.d.ts
src/reportWebVitals.ts
src/setupTests.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "z-split",
  "version": "0.1.0",
  "homepage": "https://karolplonka.github.io/z-split",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.104",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.2.1",
    "react-scripts": "^5.0.1",
    "sass": "^1.77.8",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build",
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "gh-pages": "^6.1.1"
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# z-split
https://karolplonka.github.io/z-split/

================
File: src/App.scss
================
.App {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 24px;
  padding: 32px;
  min-height: 100vh;
  background-color: var(--primary-color);
}

.header {
  font-family: 'Press Start 2P', cursive;
  color: var(--accent-color);
  font-size: 48px;
  text-shadow:
      4px 4px 0 rgba(0, 0, 0, 0.5),
      -2px -2px 0 var(--gold);
  animation: float 2s ease-in-out infinite;
}

.settle-up-debts-button {
  font-family: 'Press Start 2P', cursive;
  padding: 16px 32px;
  font-size: 16px;
  background-color: var(--secondary-color);
  color: var(--gold);
  border: 4px solid var(--border);
  box-shadow:
      inset -4px -4px 0 rgba(0, 0, 0, 0.3),
      inset 4px 4px 0 rgba(255, 255, 255, 0.1);
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
      transform: scale(1.05);
      background-color: var(--accent-color);
      color: var(--text-primary);
      border-color: var(--gold);
  }
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-6px); }
}

================
File: src/App.test.tsx
================
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/App.tsx
================
import React, {useState} from 'react';
import logo from './logo.svg';
import './assets/scss/_base.scss';

import './App.scss';

import { Debt, CalculatedDebts } from './components/Debt/DebtType';
import { Person } from './components/Person/PersonType';

import { settleUp } from './debtsSettler';
import { PersonsContainer } from './components/Person/PersonsContainer';
import { DebtsContainer } from './components/Debt/DebtsContainer';

import { DungeonSeparator } from './components/Shared/DungeonSeparator';

function App() {
    const [calculatedDebts, setCalculatedDebts] = useState<CalculatedDebts | null>(null);

    // PROD
    let defaultPersons: Person[] = [
        { id: 0, name: 'David', contribution: 0 },
        { id: 1, name: 'Elijah', contribution: 0 },
    ]

    // DEBUG
    // let defaultPersons: Person[] = [
    //     { id: 0, name: 'David', contribution: 50 },
    //     { id: 1, name: 'Elijah', contribution: 30 },
    // ];

    const [persons, setPersons] = useState(defaultPersons);


    const settleUpDebts = () => {
        const calculatedDebts = settleUp(persons);
        setCalculatedDebts(calculatedDebts);
    }

    return (
        <div className="App">
            <h1 className='header'>Å»-SPLIT</h1>
            <PersonsContainer persons={persons} setPersons={setPersons} />

            <DungeonSeparator />

            <button
                className='settle-up-debts-button'
                onClick={settleUpDebts}
            >
                Settle Up Debts
            </button>

            <DungeonSeparator />

            {calculatedDebts && <DebtsContainer calculatedDebts={calculatedDebts} />}

            {/* <DungeonSeparator /> */}

            {/* <button onClick={() => console.log({persons})}>Log persons</button> */}
        </div>
    );
}

export default App;

================
File: src/assets/scss/_base.scss
================
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

:root {
  // Pixel Art Theme Colors
  --primary-color: #1a1523;     // Dark purple/blue background
  --secondary-color: #413b5e;   // Medium purple for cards
  --accent-color: #ff6b6b;      // Vibrant red/coral
  --text-primary: #ffffff;      // White text
  --text-secondary: #9e9e9e;    // Gray text

  // Game UI Colors
  --gold: #ffd700;          // For coins/currency
  --success: #58c164;       // Green for positive actions
  --error: #ff4757;         // Red for negative actions
  --border: #645991;        // Border color

  // Pixel Art Measurements
  --pixel-size: 4px;
  --pixel-border: 4px;

  // Shadows
  --shadow-dark: rgba(0, 0, 0, 0.4);
  --shadow-light: rgba(255, 255, 255, 0.1);

  // Animation Speeds
  --animation-speed-slow: 2s;
  --animation-speed-normal: 1s;
  --animation-speed-fast: 0.3s;
}

// Pixel Art Mixins
@mixin pixel-borders {
  border: var(--pixel-border) solid var(--border);
  box-shadow:
    inset -4px -4px 0 var(--shadow-dark),
    inset 4px 4px 0 var(--shadow-light);
}

@mixin pixel-text {
  font-family: 'Press Start 2P', cursive;
  text-transform: uppercase;
  letter-spacing: 1px;
  color: var(--text-primary);
  text-shadow: 2px 2px 0 var(--shadow-dark);
}

@mixin pixel-button {
  @include pixel-borders;
  @include pixel-text;
  padding: calc(var(--pixel-size) * 2);
  background-color: var(--secondary-color);
  cursor: pointer;
  transition: all var(--animation-speed-fast);

  &:hover {
    transform: scale(1.05);
    filter: brightness(1.2);
  }

  &:active {
    transform: scale(0.95);
    filter: brightness(0.8);
  }
}

@mixin pixel-container {
  @include pixel-borders;
  background-color: var(--secondary-color);
  padding: calc(var(--pixel-size) * 4);
  margin: calc(var(--pixel-size) * 2);
}

@mixin pixel-input {
  @include pixel-borders;
  background-color: var(--primary-color);
  padding: calc(var(--pixel-size) * 2);
  font-family: 'Press Start 2P', cursive;
  color: var(--text-primary);
  font-size: 12px;

  &:focus {
    outline: none;
    border-color: var(--accent-color);
  }
}

body {
  background-color: var(--primary-color);
  color: var(--text-primary);
  font-family: 'Press Start 2P', cursive;
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-image:
    linear-gradient(45deg, var(--shadow-dark) 25%, transparent 25%),
    linear-gradient(-45deg, var(--shadow-dark) 25%, transparent 25%),
    linear-gradient(45deg, transparent 75%, var(--shadow-dark) 75%),
    linear-gradient(-45deg, transparent 75%, var(--shadow-dark) 75%);
  background-size: 20px 20px;
  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
}

// Animation Keyframes
@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-4px); }
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-2px); }
  75% { transform: translateX(2px); }
}

// Sprite Animation
@keyframes sprite-animation {
  0% { background-position: 0 0; }
  100% { background-position: -500px 0; }
}

================
File: src/components/Debt/DebtCard.tsx
================
import React from 'react';
import { Debt } from './DebtType';

export const DebtCard: React.FC<{ debt: Debt }> = ({ debt }) => {
    return(
        <div className='debt-card'>
            {debt.borrower.name} owes {debt.lender.name} {debt.amount}
        </div>
    );
}

            // <div classname='debt-card__borrower'>borrower: {debt.borrower.name}</div>
            // <div className='debt-card__lender'>Lender: {debt.lender.name}</div>
            // <div className='debt-card__amount'>Amount: {debt.amount}</div>

================
File: src/components/Debt/DebtsContainer.tsx
================
import React from 'react';
// import { Person } from './../Person/PersonType';
import { CalculatedDebts } from './DebtType';
import { DebtCard } from './DebtCard';

// import './PersonsContainer.scss';
//
export const DebtsContainer: React.FC<{ calculatedDebts: CalculatedDebts }> = ({ calculatedDebts }) => {
    return (
        <div className='debt-container'>
            <h2>Debts</h2>

            <div className='debt-container__debts-list'>
                {calculatedDebts.debts.map((debt, i) => (
                    <DebtCard debt={debt} key={i} />
                ))}
            </div>
            
            <hr/>

            <div className='debt-container__unsettleable-debt'>
                Cost per person: {calculatedDebts.costPerPerson}
            </div>

            <hr/>
            <div className='debt-container__unsettleable-debt'>
                Unsettleable Debt: {calculatedDebts.unsettleableDebt}
            </div>
        </div>
    );
}


// export const PersonsContainer: React.FC<{ persons: Person[] }> = ({ persons }) => {
//     const [localPersons, setLocalPersons] = useState([...persons]);
//
//     const addPerson = () => {
//         const newPerson = {
//             id: persons.length,
//             name: '',
//             contribution: 0,
//         };
//         persons.push(newPerson);
//         setLocalPersons([...persons]);
//         console.log(persons);
//     };
//
//     const removePerson = (index: number) => {
//         persons.splice(index, 1);
//         setLocalPersons([...persons]);
//     }
//
//
//     return (
//         <div className='persons-container'>
//             <div className='persons-container__persons-list'>
//                 {localPersons.map((person, i) => (
//                     <div className='persons-container__person-card-container' key={i}>
//
//                         <PersonCard person={person} />
//
//                         <button
//                             className='persons-container__remove-person-button' 
//                             onClick={() => removePerson(i)}
//                         >
//                             Remove Person
//                         </button>
//
//                     </div>
//                 ))}
//             </div>
//
//             <button className='persons-container__add-person-button' onClick={addPerson}>Add Person</button>
//         </div>
//     );
// };

================
File: src/components/Debt/DebtType.ts
================
import { Person } from '../Person/PersonType';

export type Debt = {
    borrower: Person;
    lender: Person;
    amount: number;
}

export type CalculatedDebts = {
    debts: Debt[];
    unsettleableDebt: number;
    costPerPerson: number;
}

================
File: src/components/Person/PersonCard.scss
================
.person-card {
  position: relative;
  width: 100%;
  max-width: 360px;
  background-color: var(--secondary-color);
  border: 4px solid var(--border);
  box-shadow:
    inset -4px -4px 0 rgba(0, 0, 0, 0.3),
    inset 4px 4px 0 rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  transition: all 0.3s ease;

  // Remove button
  &__remove {
    position: absolute;
    top: -12px;
    right: -12px;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: var(--secondary-color);
    border: 3px solid var(--border);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 2;

    &:hover {
      background-color: var(--error);
      border-color: var(--accent-color);
      transform: scale(1.1);
    }

    &-icon {
      color: var(--error);
      font-size: 16px;
      transition: all 0.2s ease;
    }

    &:hover &-icon {
      color: var(--text-primary);
    }
  }

  // Main content container
  &__content {
    padding: 16px;
  }

  // Sprite section
  &__sprite-container {
    display: flex;
    justify-content: center;
    margin-bottom: 16px;
    padding: 16px;
    background-color: var(--primary-color);
    border-radius: 4px;
    border: 2px solid var(--border);
  }

  &__sprite {
    position: relative;
    width: 50px;
    height: 72px;
    image-rendering: pixelated;
  }

  &__frame {
    width: 50px;
    height: 72px;
    background: url(https://s.cdpn.io/79/sprite-steps.png) no-repeat left top;
    animation: sprite-animation 1s steps(10) infinite;
    image-rendering: pixelated;
  }

  // Inputs section
  &__inputs {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  &__name-container {
    width: 100%;
  }

  &__contribution {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  &__input-label {
    font-family: 'Press Start 2P', cursive;
    font-size: 12px;
    color: var(--gold);
    text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.5);
    white-space: nowrap;
  }

  &__input {
    border: 3px solid var(--border);
    background-color: var(--primary-color);
    color: var(--text-primary);
    padding: 8px;
    font-family: 'Press Start 2P', cursive;
    font-size: 12px;
    transition: all 0.2s ease;

    &--contribution {
      width: 80px;
      text-align: right;
    }

    &:focus {
      outline: none;
      border-color: var(--accent-color);
      box-shadow: 0 0 8px rgba(255, 107, 107, 0.3);
    }
  }
}

@keyframes sprite-animation {
  0% { background-position: 0px 0; }
  100% { background-position: -500px 0; }
}

================
File: src/components/Person/PersonCard.tsx
================
import React from 'react';
import { FiX } from "react-icons/fi";
import { Person } from './PersonType';
import './PersonCard.scss';
import { SpinningCoin } from '../Shared/SpinningCoin';

interface PersonCardProps {
  person: Person;
  updatePerson: (index: number, updatedPerson: Person) => void;
  onRemove: (id: number) => void;
}

export const PersonCard: React.FC<PersonCardProps> = ({
  person,
  updatePerson,
  onRemove
}) => {
    const updateName = (name: string) => {
        updatePerson(person.id, { ...person, name });
    };

    const updateContribution = (contribution: number) => {
        updatePerson(person.id, { ...person, contribution });
    }

    return (
        <div className="person-card">
            <button
                className="person-card__remove"
                onClick={() => onRemove(person.id)}
                aria-label="Remove character"
            >
                <FiX className="person-card__remove-icon"/>
            </button>

            <div className="person-card__content">
                <div className="person-card__sprite-container">
                    <div className="person-card__sprite">
                        <div className="person-card__frame" />
                    </div>
                </div>

                <div className="person-card__inputs">
                    <div className="person-card__name-container">
                        <input
                            type="text"
                            className="person-card__input person-card__input--name"
                            value={person.name}
                            onChange={(e) => updateName(e.target.value)}
                            placeholder="Character name"
                        />
                    </div>

                    <div className="person-card__contribution">
                        <SpinningCoin size="small" />
                        <label className="person-card__input-label" htmlFor={`contribution-${person.id}`}>
                            Gold:
                        </label>
                        <input
                            id={`contribution-${person.id}`}
                            type="number"
                            className="person-card__input person-card__input--contribution"
                            value={person.contribution}
                            onChange={(e) => updateContribution(Number(e.target.value))}
                        />
                    </div>
                </div>
            </div>
        </div>
    );
}

================
File: src/components/Person/PersonsContainer.scss
================
.persons-container {
  width: fit-content;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
  padding: 24px;
  background-color: var(--primary-color);
  border: 4px solid var(--border);
  box-shadow:
      inset -4px -4px 0 rgba(0, 0, 0, 0.3),
      inset 4px 4px 0 rgba(255, 255, 255, 0.1);

  &__persons-list {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 16px;
  }

  &__button-add-person {
      border: 4px solid var(--border);
      border-radius: 8px;
      width: 120px;
      background-color: var(--secondary-color);
      padding: 8px;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: all 0.3s ease;

      &:hover {
          transform: scale(1.05);
          background-color: var(--success);
          border-color: var(--gold);
      }

      &__icon {
          font-size: 24px;
          color: var(--gold);
      }

      &:hover &__icon {
          color: var(--text-primary);
      }
  }

  &__button-remove-person {
      border: 4px solid var(--border);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      background-color: var(--secondary-color);
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: all 0.3s ease;

      &__icon {
          font-size: 20px;
          color: var(--error);
      }

      &:hover {
          transform: scale(1.05);
          background-color: var(--error);
          border-color: var(--gold);
      }

      &:hover &__icon {
          color: var(--text-primary);
      }
  }
}

.persons-container__person-card-container {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 12px;
}

================
File: src/components/Person/PersonsContainer.tsx
================
import React from 'react';
import { FiPlus } from "react-icons/fi";
import { Person } from './PersonType';
import { PersonCard } from './PersonCard';
import './PersonsContainer.scss';

export const PersonsContainer: React.FC<{
    persons: Person[],
    setPersons: (persons: Person[]) => void
}> = ({ persons, setPersons }) => {
    const addPerson = () => {
        const newPerson = {
            id: persons.length,
            name: `Adventurer ${persons.length + 1}`,
            contribution: 0,
        };
        setPersons([...persons, newPerson]);
    };

    const removePerson = (id: number) => {
        const newPersons = persons.filter(person => person.id !== id);
        setPersons(newPersons);
    }

    const updatePerson = (index: number, updatedPerson: Person) => {
        const newPersons = [...persons];
        newPersons[index] = updatedPerson;
        setPersons(newPersons);
    }

    return (
        <div className='persons-container'>
            <div className='persons-container__persons-list'>
                {persons.map((person, i) => (
                    <PersonCard
                        key={person.id}
                        person={person}
                        updatePerson={updatePerson}
                        onRemove={removePerson}
                    />
                ))}
            </div>

            <button className='persons-container__button-add-person' onClick={addPerson}>
                <FiPlus className='persons-container__button-add-person__icon'/>
            </button>
        </div>
    );
};

================
File: src/components/Person/PersonType.ts
================
export type Person = {
    id: number;
    name: string;
    contribution: number;
}

================
File: src/components/Shared/DungeonSeparator.scss
================
.dungeon-separator {
  position: relative;
  width: 100%;
  height: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  pointer-events: none;

  &__rune {
    width: 10px;
    height: 10px;
    background-color: var(--accent-color);
    clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
    position: relative;
    animation: rune-glow 3s ease-in-out infinite;
    box-shadow: 0 0 8px var(--accent-color);

    // Side runes
    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      width: 4px;
      height: 4px;
      background: var(--accent-color);
      clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
      transform: translateY(-50%);
      opacity: 0.6;
    }

    &::before {
      left: -24px;
      animation: side-rune-glow 3s ease-in-out infinite 0.5s;
    }

    &::after {
      right: -24px;
      animation: side-rune-glow 3s ease-in-out infinite 1s;
    }
  }

  &__line {
    position: absolute;
    width: 100%;
    height: 2px;
    &::before {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      background: repeating-linear-gradient(
        90deg,
        transparent,
        transparent 4px,
        var(--accent-color) 4px,
        var(--accent-color) 6px
      );
      opacity: 0.2;
    }
  }

  // Floating particles
  &__particles {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 140px;
    height: 30px;
    transform: translate(-50%, -50%);

    &::before,
    &::after {
      content: '';
      position: absolute;
      width: 2px;
      height: 2px;
      background: var(--accent-color);
      opacity: 0;
    }

    &::before {
      left: 30%;
      animation: float-up 2s ease-in-out infinite;
    }

    &::after {
      right: 30%;
      animation: float-up 2s ease-in-out infinite 1s;
    }
  }
}

@keyframes rune-glow {
  0%, 100% {
    filter: drop-shadow(0 0 3px var(--accent-color));
    transform: scale(1);
  }
  50% {
    filter: drop-shadow(0 0 6px var(--accent-color));
    transform: scale(1.2);
  }
}

@keyframes side-rune-glow {
  0%, 100% {
    opacity: 0.3;
    transform: translateY(-50%) scale(1);
  }
  50% {
    opacity: 0.6;
    transform: translateY(-50%) scale(1.2);
  }
}

@keyframes line-pulse {
  0%, 100% {
    opacity: 0.2;
    width: 100%;
  }
  50% {
    opacity: 0.4;
    width: 120%;
  }
}

@keyframes float-up {
  0% {
    opacity: 0;
    transform: translate(0, 0);
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 0;
    transform: translate(0, -15px);
  }
}

================
File: src/components/Shared/DungeonSeparator.tsx
================
import React from 'react';
import './DungeonSeparator.scss';

export const DungeonSeparator: React.FC = () => {
  return (
    <div className="dungeon-separator">
      <div className="dungeon-separator__line" />
      <div className="dungeon-separator__rune" />
      <div className="dungeon-separator__particles" />
    </div>
  );
};

================
File: src/components/Shared/SpinningCoin.scss
================
.spinning-coin {
  position: relative;
  display: inline-block;
  image-rendering: pixelated;

  &__frame {
    background: url('https://i.ibb.co/MPY9QVX/01coin.png') no-repeat;
    animation: coin-spin 1s steps(8) infinite;
    image-rendering: pixelated;
  }

  // Size variants
  &--small {
    .spinning-coin__frame {
      width: 16px;
      height: 16px;
      background-size: 208px 16px; // 13 frames * 16px width
    }
    .spinning-coin__value {
      font-size: 8px;
    }
  }

  &--medium {
    .spinning-coin__frame {
      width: 32px;
      height: 32px;
      background-size: 416px 32px; // 13 frames * 32px width
    }
    .spinning-coin__value {
      font-size: 12px;
    }
  }

  &--large {
    .spinning-coin__frame {
      width: 48px;
      height: 48px;
      background-size: 624px 48px; // 13 frames * 48px width
    }
    .spinning-coin__value {
      font-size: 14px;
    }
  }

  &__value {
    position: absolute;
    bottom: -20px;
    left: 50%;
    transform: translateX(-50%);
    font-family: 'Press Start 2P', cursive;
    color: var(--gold);
    text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.5);
    white-space: nowrap;
  }
}

@keyframes coin-spin {
  from { background-position: 0 0; }
  to { background-position: -100% 0; }
}

// Optional hover effect
.spinning-coin:hover {
  .spinning-coin__frame {
    animation-duration: 0.5s;
  }
}

================
File: src/components/Shared/SpinningCoin.tsx
================
import React from 'react';
import './SpinningCoin.scss';

interface SpinningCoinProps {
  value?: number;
  size?: 'small' | 'medium' | 'large';
  className?: string;
}

export const SpinningCoin: React.FC<SpinningCoinProps> = ({
  value,
  size = 'medium',
  className = ''
}) => {
  return (
    <div className={`spinning-coin spinning-coin--${size} ${className}`}>
      <div className="spinning-coin__frame" />
      {value !== undefined && (
        <span className="spinning-coin__value">{value}</span>
      )}
    </div>
  );
};

================
File: src/debtsSettler.ts
================
import { Person } from './components/Person/PersonType';
import { Debt, CalculatedDebts } from './components/Debt/DebtType';

type Lender = {
    person: Person;
    amountLeft: number;
}

export function sortFirstLender(lenders: Lender[]): void {
    const lenderToSort = lenders[0];
    lenders.splice(0, 1);

    let i = 0;
    while (i < lenders.length && lenders[i].amountLeft > lenderToSort.amountLeft) {
        i++;
    }
    lenders.splice(i, 0, lenderToSort);
}


export function settleUp(persons: Person[]): CalculatedDebts {
    const total: number = persons.reduce((acc, person) => acc + person.contribution, 0);
    const costPerPerson: number = total / persons.length;
    let debts: Debt[] = [];

    let sortedLenders: Lender[] = persons
        .filter(person => person.contribution > costPerPerson)
        .map(person => ({person: person, amountLeft: person.contribution - costPerPerson}))
        .sort((a, b) => a.amountLeft - b.amountLeft)
        .reverse();

    const borrowers: Person[] = persons.filter(person => person.contribution < costPerPerson);

    let unsettleableDebt: number = 0;
    borrowers.forEach( (borrower) => {
        let borrowerDebt: number = costPerPerson - borrower.contribution;

        while (borrowerDebt > 0) {
            if (sortedLenders.length === 0 || sortedLenders[0].amountLeft <= 0) {
                unsettleableDebt += borrowerDebt;
                break;
            }

            const amountToLend = Math.min(borrowerDebt, sortedLenders[0].amountLeft);

            borrowerDebt -= amountToLend;
            sortedLenders[0].amountLeft -= amountToLend;

            debts.push({
                borrower: borrower,
                lender: sortedLenders[0].person,
                amount: Math.round(amountToLend * 100) / 100
            });
            
            if (sortedLenders[0].amountLeft <= 0) {
                sortedLenders.shift();
            }
            else{
                sortFirstLender(sortedLenders);
            }
        }
    })
    
    return {
        debts: debts,
        unsettleableDebt: Math.round(unsettleableDebt * 100) / 100,
        costPerPerson: Math.round(costPerPerson * 100) / 100
    };
}

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/react-app-env.d.ts
================
/// <reference types="react-scripts" />

================
File: src/reportWebVitals.ts
================
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.ts
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
